import javax.sound.midi.*;
import java.io.*;
import java.util.*;

/**
 * Generates MIDI files of the frequencies
 * Most of this code was generated by Chat GPT
 */
public class Musician {

    public static void play(ArrayList<Integer> freq, int playerNum, String fileName) {
        
        try {
            // Create a Sequence and a Track
            Sequence sequence = new Sequence(Sequence.PPQ, 24);
            Track track = sequence.createTrack();
            
            // Set the tempo (optional)
            int bpm = 120;
            int microsecPerBeat = 60000000 / bpm;
            MetaMessage tempoMessage = new MetaMessage();
            byte[] data = new byte[]{(byte) ((microsecPerBeat >> 16) & 0xFF),
                    (byte) ((microsecPerBeat >> 8) & 0xFF), (byte) (microsecPerBeat & 0xFF)};
            tempoMessage.setMessage(0x51, data, 3);
            MidiEvent tempoEvent = new MidiEvent(tempoMessage, 0);
            track.add(tempoEvent);
            
            // Add Note On and Note Off events for each frequency
            int channel = 0;
            int velocity = 64;
            int tick = 0;
            int ticksPerBeat = sequence.getResolution();
            
            for (int frequency : freq) {
                int noteNumber = frequencyToNoteNumber(frequency);
                
                MidiEvent noteOn = createNoteOnEvent(channel, noteNumber, velocity, tick);
                MidiEvent noteOff = createNoteOffEvent(channel, noteNumber, velocity, tick + ticksPerBeat/2);
                
                track.add(noteOn);
                track.add(noteOff);
                
                tick += ticksPerBeat/2;
            }
            
            // Write the Sequence to a MIDI file
            File midiFile = new File(fileName.substring(0,fileName.length()-4) + playerNum + ".mid");
            MidiSystem.write(sequence, 1, midiFile);
            
            System.out.println("MIDI file generated successfully.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static int frequencyToNoteNumber(double frequency) {
        return (int) Math.round(12 * (Math.log(frequency / 440.0) / Math.log(2)) + 69);
    }
    
    private static MidiEvent createNoteOnEvent(int channel, int noteNumber, int velocity, long tick) throws InvalidMidiDataException {
        ShortMessage message = new ShortMessage();
        message.setMessage(ShortMessage.NOTE_ON, channel, noteNumber, velocity);
        return new MidiEvent(message, tick);
    }
    
    private static MidiEvent createNoteOffEvent(int channel, int noteNumber, int velocity, long tick) throws InvalidMidiDataException {
        ShortMessage message = new ShortMessage();
        message.setMessage(ShortMessage.NOTE_OFF, channel, noteNumber, velocity);
        return new MidiEvent(message, tick);
    }
}